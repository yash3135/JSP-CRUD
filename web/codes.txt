# resize img

from PIL import Image
from realesrgan import RealESRGAN
import torch

# Load image
input_image = Image.open("low_res_image.jpg").convert("RGB")

# Set device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Load model
model = RealESRGAN(device, scale=4)  # You can change scale to 2 or 4
model.load_weights('RealESRGAN_x4.pth')  # This will auto-download if not found

# Enhance image
sr_image = model.predict(input_image)

# Save and show
sr_image.save("super_res_image.jpg")
sr_image.show()

===============================================================================================

# face and eye detection



---



import cv2

# Load image
img = cv2.imread('person.jpg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Load pre-trained Haar cascades (ML-based)
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

# Detect faces
faces = face_cascade.detectMultiScale(gray)

for (x, y, w, h) in faces:
    cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)
    roi_gray = gray[y:y+h, x:x+w]
    roi_color = img[y:y+h, x:x+w]

    # Detect eyes inside the face
    eyes = eye_cascade.detectMultiScale(roi_gray)
    for (ex, ey, ew, eh) in eyes:
        cv2.rectangle(roi_color, (ex, ey), (ex+ew, ey+eh), (0, 255, 0), 2)

# Save the result
cv2.imwrite('output.jpg', img)
print("Detection done. Output saved as 'output.jpg'")


===============================================================================================

# play video using open cv


import cv2

# Load face detection model (pre-trained)
face_model = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Open video file or webcam (0 = default camera)
cap = cv2.VideoCapture("your_video.mp4")  # Replace with 0 for webcam

while True:
    success, frame = cap.read()
    if not success:
        break

    # Convert to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces
    faces = face_model.detectMultiScale(gray)

    # Draw green boxes around faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

    # Show the frame
    cv2.imshow("Video with Face Detection", frame)

    # Break loop on 'q' key
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()

=====================================================================================================
ASP.NET
=====================================================================================================
student crud
=====================================================================================================
student.aspx.cs
=====================================================================================================
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Diagnostics;

namespace crud_test
{
    public partial class students : System.Web.UI.Page
    {
        string conString = ConfigurationManager.ConnectionStrings["dbConnection"].ConnectionString;
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                Debug.WriteLine(conString);
                LoadData();
            }
        }

        void LoadData()
        {
            using (SqlConnection con = new SqlConnection(conString))
            {
                using (SqlDataAdapter da = new SqlDataAdapter("SELECT * FROM tbl_students", con))
                {
                    DataTable dt = new DataTable();
                    da.Fill(dt);
                    GridView1.DataSource = dt;
                    GridView1.DataBind();
                }
            }
        }

        protected void btnAdd_Click(object sender, EventArgs e)
        {
            using (SqlConnection con = new SqlConnection(conString))
            {
                string query = "INSERT INTO tbl_students (name, roll_no, Age) VALUES (@name, @roll_no, @Age)";
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    cmd.Parameters.AddWithValue("@name", txtName.Text);
                    cmd.Parameters.AddWithValue("@roll_no", txtRollNo.Text);
                    cmd.Parameters.AddWithValue("@Age", txtAge.Text);
                    con.Open();
                    cmd.ExecuteNonQuery();
                    con.Close();
                }
            }
            LoadData();
        }

        protected void GridView1_RowDeleting(object sender, System.Web.UI.WebControls.GridViewDeleteEventArgs e)
        {
            int id = Convert.ToInt32(GridView1.DataKeys[e.RowIndex].Value);
            using (SqlConnection con = new SqlConnection(conString))
            {
                string query = "DELETE FROM tbl_students WHERE Id=@Id";
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    cmd.Parameters.AddWithValue("@Id", id);
                    con.Open();
                    cmd.ExecuteNonQuery();
                    con.Close();
                }
            }
            LoadData();
        }

        protected void GridView1_RowEditing(object sender, System.Web.UI.WebControls.GridViewEditEventArgs e)
        {
            GridView1.EditIndex = e.NewEditIndex;
            LoadData();
        }

        protected void GridView1_RowCancelingEdit(object sender, System.Web.UI.WebControls.GridViewCancelEditEventArgs e)
        {
            GridView1.EditIndex = -1;
            LoadData();
        }

        protected void GridView1_RowUpdating(object sender, System.Web.UI.WebControls.GridViewUpdateEventArgs e)
        {
            int id = Convert.ToInt32(GridView1.DataKeys[e.RowIndex].Value);
            TextBox txtName = (TextBox)GridView1.Rows[e.RowIndex].Cells[1].Controls[0];
            TextBox txtRollNo = (TextBox)GridView1.Rows[e.RowIndex].Cells[2].Controls[0];
            TextBox txtAge = (TextBox)GridView1.Rows[e.RowIndex].Cells[3].Controls[0];

            using (SqlConnection con = new SqlConnection(conString))
            {
                string query = "UPDATE tbl_students SET name=@name, roll_no=@roll_no, Age=@Age WHERE Id=@Id";
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    cmd.Parameters.AddWithValue("@Id", id);
                    cmd.Parameters.AddWithValue("@name", txtName.Text);
                    cmd.Parameters.AddWithValue("@roll_no", txtRollNo.Text);
                    cmd.Parameters.AddWithValue("@Age", txtAge.Text);
                    con.Open();
                    cmd.ExecuteNonQuery();
                    con.Close();
                }
            }

            GridView1.EditIndex = -1;
            LoadData();
        }
    }
}
=====================================================================================================
student.aspx
=====================================================================================================
<%@ Page Title="" Language="C#" MasterPageFile="~/Site.Master" AutoEventWireup="true" CodeBehind="students.aspx.cs" Inherits="crud_test.students" %>

<asp:Content ID="Content1" ContentPlaceHolderID="MainContent" runat="server">
    <div class="container mt-5">
        <h2 class="text-center">CRUD Operations</h2>
        <div class="mb-3">
            <label>Name:</label>
            <asp:TextBox ID="txtName" CssClass="form-control" runat="server"></asp:TextBox>
        </div>
        <div class="mb-3">
            <label>Roll No:</label>
            <asp:TextBox ID="txtRollNo" CssClass="form-control" runat="server"></asp:TextBox>
        </div>
        <div class="mb-3">
            <label>Age:</label>
            <asp:TextBox ID="txtAge" CssClass="form-control" runat="server"></asp:TextBox>
        </div>

        <asp:LinkButton ID="btnAdd" runat="server" CssClass="btn btn-success" OnClick="btnAdd_Click">
            <i class="bi bi-plus-lg me-1"></i> Add
        </asp:LinkButton>

        <hr />
        <asp:GridView ID="GridView1" runat="server" CssClass="table table-bordered mt-3"
            AutoGenerateColumns="False" DataKeyNames="Id"
            OnRowDeleting="GridView1_RowDeleting"
            OnRowEditing="GridView1_RowEditing"
            OnRowUpdating="GridView1_RowUpdating"
            OnRowCancelingEdit="GridView1_RowCancelingEdit">

            <Columns>
                <asp:BoundField DataField="id" HeaderText="ID" ReadOnly="True" />

                <asp:BoundField DataField="name" HeaderText="Name" />

                <asp:BoundField DataField="roll_no" HeaderText="roll no" />

                <asp:BoundField DataField="Age" HeaderText="Age" />

                <asp:TemplateField HeaderText="Actions">
                    <EditItemTemplate>
                        <asp:LinkButton ID="lnkUpdate" runat="server" CommandName="Update" CssClass="btn btn-success btn-sm">
                        <i class="bi bi-check2-all me-1"></i>  Update
                        </asp:LinkButton>

                        <asp:LinkButton ID="lnkCancel" runat="server" CommandName="Cancel" CssClass="btn btn-secondary btn-sm">
                        <i class="bi bi-x-lg me-1"></i> Cancel
                        </asp:LinkButton>
                    </EditItemTemplate>

                    <ItemTemplate>
                        <asp:LinkButton ID="lnkEdit" runat="server" CommandName="Edit" CssClass="btn btn-warning btn-sm">
                        <i class="bi bi-pencil-square me-1"></i> Edit
                        </asp:LinkButton>

                        <asp:LinkButton ID="lnkDelete" runat="server" CommandName="Delete" CssClass="btn btn-danger btn-sm"
                            OnClientClick="return confirm('Are you sure you want to delete this item?');">
                                <i class="bi bi-trash me-1"></i>Delete
                        </asp:LinkButton>
                    </ItemTemplate>
                </asp:TemplateField>

            </Columns>
        </asp:GridView>

    </div>

</asp:Content>
=====================================================================================================
android crud link: https://github.com/Yashkotecha1/Sqlite_proct
=====================================================================================================
android crud link: https://github.com/Yashkotecha1/Sqlite_demo
=====================================================================================================
android crud yt link: https://github.com/stevdza-san/SQLite_Android-Complete_Tutorial/
=====================================================================================================
Machine learning 
=====================================================================================================
definition 1
=====================================================================================================
# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Task 1: Read the CSV file
# Assuming the file 'salary_data.csv' is in the current directory
df = pd.read_csv('./dataset/salary_data.csv')

# Task 2: Clean the data if necessary
# Check for any missing values or anomalies in the dataset
print(df.isnull().sum())  # Check for missing values
print(df.describe())  # Get a summary of the dataset

# If there are missing values (NaN), we can drop them or fill them (optional)
# For now, let's drop rows with any missing values (if any).
df = df.dropna()

# Task 3: Split the data into 70% training and 30% testing
X = df[['YearsExperience']]  # Feature (independent variable)
y = df['Salary']  # Target (dependent variable)

# Split the dataset: 70% training and 30% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Task 4: Fit a simple linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Task 5: Plot the regression line over the scatter plot of the training data
plt.figure(figsize=(10, 6))

# Scatter plot of training data
plt.scatter(X_train, y_train, color='blue', label='Training Data')

# Plot the regression line: y = mx + c
y_pred_train = model.predict(X_train)
plt.plot(X_train, y_pred_train, color='red', label='Regression Line')

plt.title('Linear Regression: Salary vs YearsExperience (Training Data)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.legend()
plt.grid(True)
plt.show()

# Task 6: Predict salaries for the test set and compute MSE and R²
y_pred_test = model.predict(X_test)

# Calculate Mean Squared Error (MSE) and R-squared (R²)
mse = mean_squared_error(y_test, y_pred_test)
r2 = r2_score(y_test, y_pred_test)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R²): {r2}")

# Displaying the predicted vs actual values for the test set
comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_test})
print("\nActual vs Predicted salaries on Test Set:")
print(comparison_df)
=====================================================================================================
definition 2
=====================================================================================================
# Import required libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score
import seaborn as sns
import matplotlib.pyplot as plt

# Task 1: Read the CSV file
df = pd.read_csv('./dataset/shoping.csv')

# Task 2: Clean the data & label encoding
print("Checking for missing values:\n", df.isnull().sum())
df = df.dropna()  # Remove rows with missing data if any

# Encode categorical variables: Income, Gender, Browsing_History, Purchase_Category
label_encoders = {}
for column in ['Income', 'Gender', 'Browsing_History', 'Purchase_Category']:
    le = LabelEncoder()
    df[column + '_encoded'] = le.fit_transform(df[column])
    label_encoders[column] = le  # Save encoder for decoding later

# Task 3: Split the data into 70% training and 30% testing
X = df[['Age', 'Income_encoded', 'Gender_encoded', 'Browsing_History_encoded']]
y = df['Purchase_Category_encoded']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Task 4: Fit a simple logistic regression model
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

# Task 5: Predict probabilities and convert to class labels
y_prob = model.predict_proba(X_test)
y_pred = model.predict(X_test)

# Task 6: Generate confusion matrix and calculate metrics
conf_matrix = confusion_matrix(y_test, y_pred)
acc = accuracy_score(y_test, y_pred)

# Get encoded label for "Electronics"
electronics_encoded = label_encoders['Purchase_Category'].transform(['Electronics'])[0]

# Calculate precision for class "Electronics"
precision = precision_score(y_test, y_pred, average='macro', labels=[electronics_encoded])

# Print results
print("\nConfusion Matrix:\n", conf_matrix)
print(f"\nAccuracy: {acc:.2f}")
print(f"Precision for class 'Electronics': {precision:.2f}")

# Optional: Plot confusion matrix using seaborn
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=label_encoders['Purchase_Category'].classes_,
            yticklabels=label_encoders['Purchase_Category'].classes_)
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()
=====================================================================================================
1-mean_removal.py
=====================================================================================================
import pandas as pd
from sklearn.preprocessing import StandardScaler

# Load dataset from CSV
dataset_path = "./dataset/dataset2.csv"  # Ensure this file exists in the current directory
df = pd.read_csv(dataset_path)

# Display original data
print("Original Data:")
print(df)

features = ['Price', 'Size']

# Apply mean removal (Standard Scaling)
scaler = StandardScaler()
result = scaler.fit_transform(df[features])
result_df = pd.DataFrame(result, columns=features)

# Display transformed data
print("\nData After Mean Removal (Mean Removal):")
print(result_df)
# print("Mean", result_df.mean())
# print("Standard Deviation", result_df.std())

# # Save the transformed dataset back to a CSV file
# output_path = "transformed_house_price_dataset.csv"
# df.to_csv(output_path, index=False)
# print(f"\nTransformed dataset saved to: {output_path}")

=====================================================================================================
2-mean_scaling.py
=====================================================================================================
import pandas as pd
from sklearn.preprocessing import MinMaxScaler

dataset_path = "./dataset/dataset2.csv"  # Ensure this file exists in the current directory
df = pd.read_csv(dataset_path)

print("Original Data:")
print(df)

features = ['Price', 'Size']

scaler = MinMaxScaler()
result = scaler.fit_transform(df[features])
result_df = pd.DataFrame(result, columns=features)

print("\nData After Mean Scaling:")
print(result_df)


# print("Mean", result_df.mean())
# print("Standard Deviation", result_df.std())

# # Save the transformed dataset back to a CSV file
# output_path = "transformed_house_price_dataset.csv"
# df.to_csv(output_path, index=False)
# print(f"\nTransformed dataset saved to: {output_path}")

=====================================================================================================
3-normalization.py
=====================================================================================================
import pandas as pd
from sklearn.preprocessing import Normalizer

dataset_path = "./dataset/dataset2.csv"  # Ensure this file exists in the current directory
df = pd.read_csv(dataset_path)

print("Original Data:")
print(df)

features = ['Price', 'Size']

scaler = Normalizer(norm="l2")
result = scaler.fit_transform(df[features])
result_df = pd.DataFrame(result, columns=features)

print("\nData After Mean Removal (Normalization):")
print(result_df)


# print("Mean", result_df.mean())
# print("Standard Deviation", result_df.std())

# # Save the transformed dataset back to a CSV file
# output_path = "transformed_house_price_dataset.csv"
# df.to_csv(output_path, index=False)
# print(f"\nTransformed dataset saved to: {output_path}")

=====================================================================================================
4-binarization.py
=====================================================================================================
import pandas as pd
from sklearn.preprocessing import Binarizer

dataset_path = "./dataset/dataset2.csv"  # Ensure this file exists in the current directory
df = pd.read_csv(dataset_path)

print("Original Data:")
print(df)

features = ['Neighborhood_Rating']

scaler = Binarizer(threshold=4)
result = scaler.fit_transform(df[features])
result_df = pd.DataFrame(result, columns=features)

print("\nData After Mean Binarization:")
print(result_df)


# print("Mean", result_df.mean())
# print("Standard Deviation", result_df.std())

# # Save the transformed dataset back to a CSV file
# output_path = "transformed_house_price_dataset.csv"
# df.to_csv(output_path, index=False)
# print(f"\nTransformed dataset saved to: {output_path}")

=====================================================================================================
5-one_hot_encoding.py
=====================================================================================================
import pandas as pd
from sklearn.preprocessing import OneHotEncoder

dataset_path = "./dataset/dataset2.csv"  # Ensure this file exists in the current directory
df = pd.read_csv(dataset_path)

print("Original Data:")
print(df)

feature1 = ['Location']
feature2 = ['Condition']

encoder = OneHotEncoder(sparse_output=False)

# Encoding Location
location_encoded = encoder.fit_transform(df[feature1])
location_columns = [f"Location_{category}" for category in encoder.categories_[0]]
location_encoded_df = pd.DataFrame(location_encoded, columns=location_columns)

# Encoding Condition
condition_encoded = encoder.fit_transform(df[feature2])
condition_columns = [f"Condition_{category}" for category in encoder.categories_[0]]
condition_encoded_df = pd.DataFrame(condition_encoded, columns=condition_columns)

# Concatenate the original dataframe with the encoded data
df = pd.concat([df, location_encoded_df, condition_encoded_df], axis=1)

# Display transformed data
print("\nData After One-Hot Encoding:")
print(df.head())

# Save the transformed dataset back to a CSV file
output_path = "one_hot_encoded_dataset.csv"
df.to_csv(output_path, index=False)
print(f"\nTransformed dataset saved to: {output_path}")

=====================================================================================================
6-label_encoding.py
=====================================================================================================
import pandas as pd
from sklearn.preprocessing import LabelEncoder

dataset_path = "./dataset/dataset2.csv"  # Ensure this file exists in the current directory
df = pd.read_csv(dataset_path)

print("Original Data:")
print(df)


encoder = LabelEncoder()

# Apply label encoding to the 'Location', 'Condition', and 'Has_Garage' columns
df['Location'] = encoder.fit_transform(df['Location'])
df['Condition'] = encoder.fit_transform(df['Condition'])
df['Has_Garage'] = encoder.fit_transform(df['Has_Garage'])

# Display the transformed DataFrame
print(df)
=====================================================================================================
haarcascade list
=====================================================================================================
haarcascade_eye.xml
haarcascade_eye_tree_eyeglasses.xml
haarcascade frontalcatface.xml
haarcascade frontalface alt.xml
haarcascade frontalface alt tree.xml
haarcascade_frontalface default-xml
haarcascade_fullbody.xml
haarcascade_license_plate_rus_16stages.xml
haa rcascade_lowerbody.xml
haarcascade_profileface.xml
haarcascade_righteye_2splits.xrnl
haarcascade_russian_plate_number.xml
haarcascade smile.xml
haarcascade_upperbody.xml
=====================================================================================================
ASP.NET LOGIN LOGOUT SESSION
=====================================================================================================
Login.aspx
=====================================================================================================
<%@ Page Language="C#" AutoEventWireup="true" CodeFile="Login.aspx.cs" Inherits="Login" %>

<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
    <style>
        .login-container { width: 300px; margin: 100px auto; padding: 20px; border: 1px solid #ccc; }
        .form-group { margin-bottom: 15px; }
        label { display: block; margin-bottom: 5px; }
        input { width: 100%; padding: 5px; }
    </style>
</head>
<body>
    <form id="form1" runat="server">
        <div class="login-container">
            <h2>Login</h2>
            <div class="form-group">
                <label>Username:</label>
                <asp:TextBox ID="txtUsername" runat="server"></asp:TextBox>
            </div>
            <div class="form-group">
                <label>Password:</label>
                <asp:TextBox ID="txtPassword" runat="server" TextMode="Password"></asp:TextBox>
            </div>
            <asp:Button ID="btnLogin" runat="server" Text="Login" OnClick="btnLogin_Click" />
            <asp:Label ID="lblMessage" runat="server" ForeColor="Red"></asp:Label>
        </div>
    </form>
</body>
</html>
=====================================================================================================
Login.aspx.cs
=====================================================================================================
using System;
using System.Web.UI;

public partial class Login : Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        // Check if user is already logged in
        if (Session["LoggedIn"] != null && (bool)Session["LoggedIn"])
        {
            Response.Redirect("Home.aspx");
        }
    }

    protected void btnLogin_Click(object sender, EventArgs e)
    {
        // Simple hardcoded credentials for demonstration
        string validUsername = "admin";
        string validPassword = "password123";

        if (txtUsername.Text == validUsername && txtPassword.Text == validPassword)
        {
            Session["LoggedIn"] = true;
            Session["Username"] = txtUsername.Text;
            Response.Redirect("Home.aspx");
        }
        else
        {
            lblMessage.Text = "Invalid username or password!";
        }
    }
}
=====================================================================================================
Home.aspx
=====================================================================================================
<%@ Page Language="C#" AutoEventWireup="true" CodeFile="Home.aspx.cs" Inherits="Home" %>

<!DOCTYPE html>
<html>
<head>
    <title>Home</title>
</head>
<body>
    <form id="form1" runat="server">
        <div>
            <h1>Welcome, <%= Session["Username"] %>!</h1>
            <asp:Button ID="btnLogout" runat="server" Text="Logout" OnClick="btnLogout_Click" />
        </div>
    </form>
</body>
</html>
=====================================================================================================
Home.aspx.cs
=====================================================================================================
using System;
using System.Web.UI;

public partial class Home : Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["LoggedIn"] == null || !(bool)Session["LoggedIn"])
        {
            Response.Redirect("Login.aspx");
        }
    }

    protected void btnLogout_Click(object sender, EventArgs e)
    {
        Session.Abandon();
        Response.Redirect("Login.aspx");
    }
}
=====================================================================================================
